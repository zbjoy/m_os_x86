
os.elf:     file format elf32-i386
os.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00007c00

Program Header:
    LOAD off    0x00000000 vaddr 0x00007000 paddr 0x00007000 align 2**12
         filesz 0x00000ff4 memsz 0x00000ff4 flags r-x
    LOAD off    0x00001000 vaddr 0x00009000 paddr 0x00009000 align 2**12
         filesz 0x00003800 memsz 0x00005000 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000399  00007c00  00007c00  00000c00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .eh_frame     00000058  00007f9c  00007f9c  00000f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00003800  00009000  00009000  00001000  2**12
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00001800  0000c800  0000c800  00004800  2**5
                  ALLOC
  4 .comment      00000011  00000000  00000000  00004800  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00004818  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000239  00000000  00000000  00004858  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000011d  00000000  00000000  00004a91  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000000d0  00000000  00000000  00004bae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000167  00000000  00000000  00004c7e  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00007c00 l    d  .text	00000000 .text
00007f9c l    d  .eh_frame	00000000 .eh_frame
00009000 l    d  .data	00000000 .data
0000c800 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    df *ABS*	00000000 start.o
00007c05 l       .text	00000000 offset
00007c18 l       .text	00000000 read_self_all
00007e00 l       .text	00000000 _start_32
00007e5b l       .text	00000000 gdt_desc
00007e61 l       .text	00000000 idt_desc
00007e4e l       .text	00000000 task_0_entry
00000000 l    df *ABS*	00000000 os.c
0000a000 l     O .data	00001000 page_table
0000c000 g     O .data	00000800 gdt_table
0000c800 g     O .bss	00001000 task0_dpl3_stack
00009000 g     O .data	00001000 map_phy_buffer
00007e45 g       .text	00000000 timer_int
00007e86 g     F .text	00000113 os_init
00007c00 g       .text	00000000 _start
00007e67 g     F .text	0000001f outb
0000c800 g       .bss	00000000 __bss_start
0000b000 g     O .data	00001000 pg_dir
0000c800 g       .data	00000000 _edata
0000e000 g       .bss	00000000 _end
0000d800 g     O .bss	00000800 idt_table



Disassembly of section .text:

00007c00 <_start>:

	// 以下是代码区
 	.text
_start: 
	// 将 cs 置为 0
	jmp $0, $offset
    7c00:	ea                   	.byte 0xea
    7c01:	05                   	.byte 0x5
    7c02:	7c 00                	jl     7c04 <_start+0x4>
	...

00007c05 <offset>:
offset:

	// 将 实模式下 的 段寄存器 全部设置为 0 为 基地址(平坦模式)
	mov $0, %ax
    7c05:	b8 00 00 8e d8       	mov    $0xd88e0000,%eax
	mov %ax, %ds
	mov %ax, %ss
    7c0a:	8e d0                	mov    %eax,%ss
	mov %ax, %es
    7c0c:	8e c0                	mov    %eax,%es
	mov %ax, %fs
    7c0e:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
    7c10:	8e e8                	mov    %eax,%gs

	// TODO: 不理解, 为什么 要把 _start 存到 esp(32位) 寄存器中
	mov $_start, %esp
    7c12:	66 bc 00 7c          	mov    $0x7c00,%sp
	...

00007c18 <read_self_all>:
	
read_self_all:

	// 读取 剩余 代码 (os.c)
	mov $_start_32, %bx // 读取到内存的地址, 相当于 0x7E00
    7c18:	bb 00 7e b9 02       	mov    $0x2b97e00,%ebx
	mov $0x2, %cx  	 	// 读取扇区的开始位置
    7c1d:	00 b8 40 02 ba 80    	add    %bh,-0x7f45fdc0(%eax)
	mov $0x240, %ax	 	// 读取的大小为 0x240(576) - 0x200(512) = 0x40(64) 个 扇区
	mov $0x80, %dx	 	// 表示 计算器上的 第一块 磁盘 (对于 qemu)
    7c23:	00 cd                	add    %cl,%ch
	int $0x13		 	// 通过 INT 13 x86的软中断 跳转到 BIOS中断提供的 BIOS代码 的 读取 磁盘的 函数位置
    7c25:	13 72 f0             	adc    -0x10(%edx),%esi

	jc read_self_all	// 判断是否成功, 失败重新调用 BIOS提供的读取磁盘的代码

	cli 				// 关中断
    7c28:	fa                   	cli    
	lgdt gdt_desc 		// 通过 lgdt 指令 将 os.c 中 定义的 gdt_table 的 地址读取进来
    7c29:	0f 01 16             	lgdtl  (%esi)
    7c2c:	5b                   	pop    %ebx
    7c2d:	7e 0f                	jle    7c3e <read_self_all+0x26>
	lidt idt_desc		// 通过 lidt 指令 将 os.c 中 定义的 idt_table 的 地址读取进来
    7c2f:	01 1e                	add    %ebx,(%esi)
    7c31:	61                   	popa   
    7c32:	7e 66                	jle    7c9a <read_self_all+0x82>
	mov $1, %eax		// CR0 是 32位, 所以 给到 exa
    7c34:	b8 01 00 00 00       	mov    $0x1,%eax
	lmsw %ax			// 会将 CR0 寄存器 中 的 PE(最低位) 置为 1, 开启 保护模式
    7c39:	0f 01 f0             	lmsw   %ax
	jmp $KERNEL_CODE_SEG, $_start_32	// 原来 为 16位 实模式, 要进入 保护模式, 需要 做一些 跳转 工作(会 清除 一些 流水线 等)
    7c3c:	ea 00 7e 08 00 00 00 	ljmp   $0x0,$0x87e00
	...
    7dfb:	00 00                	add    %al,(%eax)
    7dfd:	00 55 aa             	add    %dl,-0x56(%ebp)

00007e00 <_start_32>:

_start_32:
	// .fill 64*1024, 1, 0x35  // 填充 64KB 数据, 每个为 1Byte, 数据为 0x35
	
	// 将 寄存器 中的 值 赋上 对应 的 索引值
	mov $KERNEL_DATA_SEG, %ax
    7e00:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
    7e04:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
    7e06:	8e d0                	mov    %eax,%ss
	mov %ax, %es
    7e08:	8e c0                	mov    %eax,%es
	mov %ax, %fs
    7e0a:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
    7e0c:	8e e8                	mov    %eax,%gs
	mov $_start, %esp
    7e0e:	bc 00 7c 00 00       	mov    $0x7c00,%esp

	call os_init
    7e13:	e8 6e 00 00 00       	call   7e86 <os_init>

	// 将 pg_dir 设置 到 cr3 寄存器中 (将 cr3 寄存器 的 Page Address 设置为了 pg_dir 的 地址)
	mov $pg_dir, %eax
    7e18:	b8 00 b0 00 00       	mov    $0xb000,%eax
	mov %eax, %cr3
    7e1d:	0f 22 d8             	mov    %eax,%cr3

	// 设置 cr4 寄存器 的 第四位 PSE 使 允许 4M 到 4M 的 映射
	mov %cr4, %eax
    7e20:	0f 20 e0             	mov    %cr4,%eax
	orl $(1 << 4), %eax
    7e23:	83 c8 10             	or     $0x10,%eax
	mov %eax, %cr4
    7e26:	0f 22 e0             	mov    %eax,%cr4

	// 将 cr0 最高位 置为 1, 使 打开 分页机制
	mov %cr0, %eax
    7e29:	0f 20 c0             	mov    %cr0,%eax
	orl $(1 << 31), %eax
    7e2c:	0d 00 00 00 80       	or     $0x80000000,%eax
	mov %eax, %cr0
    7e31:	0f 22 c0             	mov    %eax,%cr0

	// sti // 打开中断
	
	// jmp .

	push $APP_DATA_SEG 	 				// 保存 APP_DATA_SEG 到栈中 (放入 ss 寄存器)
    7e34:	6a 23                	push   $0x23
	// push $0		   					// 给 一定 的 栈空间
	push $task0_dpl3_stack + 1024 * 4  	// 给到 栈的 地址 (给 数组 的 末尾) (给到 ESP 寄存器)
    7e36:	68 00 d8 00 00       	push   $0xd800
	push $0 // $0x202							// 给到 EFLAGS 寄存器, 给相应位 置1 打开了 中断(0x202)
    7e3b:	6a 00                	push   $0x0
	push $APP_CODE_SEG 					// 给到 CS 寄存器
    7e3d:	6a 1b                	push   $0x1b
	push $task_0_entry 					// 给到 EIP 寄存器	
    7e3f:	68 4e 7e 00 00       	push   $0x7e4e
	iret 			   					// 结束中断, 重新执行 被中断的 指令
    7e44:	cf                   	iret   

00007e45 <timer_int>:


timer_int:
	push %ds // 保存 ds 寄存器 中的 值
    7e45:	1e                   	push   %ds
	pusha	 // 保存 ax, bx, cx, dx, ... 等 寄存器的 值
    7e46:	60                   	pusha  

	mov $0x20, %al
    7e47:	b0 20                	mov    $0x20,%al
	outb %al, $0x20
    7e49:	e6 20                	out    %al,$0x20

	popa  	 // 恢复 ax, bx, cx, dx, ... 等 寄存器的 值
    7e4b:	61                   	popa   
	pop %ds  // 恢复 ds 寄存器 中的 值
    7e4c:	1f                   	pop    %ds

	iret // 结束中断, 重新执行 被中断的 指令
    7e4d:	cf                   	iret   

00007e4e <task_0_entry>:

// 任务 0
task_0_entry:
	mov %ss, %ax // 保存 ss 寄存器 中的 值
    7e4e:	66 8c d0             	mov    %ss,%ax
	mov %ax, %ds // 将 ss 寄存器 中的 值 赋给 ds 寄存器
    7e51:	8e d8                	mov    %eax,%ds
	mov %ax, %es // 将 ss 寄存器 中的 值 赋给 es 寄存器
    7e53:	8e c0                	mov    %eax,%es
	mov %ax, %fs // 将 ss 寄存器 中的 值 赋给 fs 寄存器
    7e55:	8e e0                	mov    %eax,%fs
	mov %ax, %gs // 将 ss 寄存器 中的 值 赋给 gs 寄存器
    7e57:	8e e8                	mov    %eax,%gs
	jmp .
    7e59:	eb fe                	jmp    7e59 <task_0_entry+0xb>

00007e5b <gdt_desc>:
    7e5b:	ff 07                	incl   (%edi)
    7e5d:	00 c0                	add    %al,%al
	...

00007e61 <idt_desc>:
    7e61:	ff 07                	incl   (%edi)
    7e63:	00 d8                	add    %bl,%al
	...

00007e67 <outb>:
    [APP_CODE_SEG / 8] = {0xFFFF, 0x0000, 0xFA00, 0x00CF},  // 应用代码段, 设置 DPL 为 3, 即 内核态 无法访问
    [APP_DATA_SEG / 8] = {0xFFFF, 0x0000, 0xF300, 0x00CF},  // 应用数据段, 设置 DPL 为 3, 即 内核态 无法访问
};

void outb(uint8_t data, uint16_t port)
{
    7e67:	55                   	push   %ebp
    7e68:	89 e5                	mov    %esp,%ebp
    7e6a:	83 ec 08             	sub    $0x8,%esp
    7e6d:	8b 55 08             	mov    0x8(%ebp),%edx
    7e70:	8b 45 0c             	mov    0xc(%ebp),%eax
    7e73:	88 55 fc             	mov    %dl,-0x4(%ebp)
    7e76:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    __asm__ __volatile__ ("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
    7e7a:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
    7e7e:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
    7e82:	ee                   	out    %al,(%dx)
}
    7e83:	90                   	nop
    7e84:	c9                   	leave  
    7e85:	c3                   	ret    

00007e86 <os_init>:

void timer_int(void);

void os_init(void)
{
    7e86:	55                   	push   %ebp
    7e87:	89 e5                	mov    %esp,%ebp
    7e89:	83 ec 10             	sub    $0x10,%esp
    // 初始化 8259 与 8253  定时器
    outb(0x11, 0x20);
    7e8c:	6a 20                	push   $0x20
    7e8e:	6a 11                	push   $0x11
    7e90:	e8 d2 ff ff ff       	call   7e67 <outb>
    7e95:	83 c4 08             	add    $0x8,%esp
    outb(0x11, 0xA0);
    7e98:	68 a0 00 00 00       	push   $0xa0
    7e9d:	6a 11                	push   $0x11
    7e9f:	e8 c3 ff ff ff       	call   7e67 <outb>
    7ea4:	83 c4 08             	add    $0x8,%esp
    outb(0x20, 0x21); // 设置 8259主片 在查 IDT表 时 通过 0x20 来 查找
    7ea7:	6a 21                	push   $0x21
    7ea9:	6a 20                	push   $0x20
    7eab:	e8 b7 ff ff ff       	call   7e67 <outb>
    7eb0:	83 c4 08             	add    $0x8,%esp
    outb(0x28, 0xA1);
    7eb3:	68 a1 00 00 00       	push   $0xa1
    7eb8:	6a 28                	push   $0x28
    7eba:	e8 a8 ff ff ff       	call   7e67 <outb>
    7ebf:	83 c4 08             	add    $0x8,%esp
    outb(1 << 2, 0x21);
    7ec2:	6a 21                	push   $0x21
    7ec4:	6a 04                	push   $0x4
    7ec6:	e8 9c ff ff ff       	call   7e67 <outb>
    7ecb:	83 c4 08             	add    $0x8,%esp
    outb(2, 0xA1);
    7ece:	68 a1 00 00 00       	push   $0xa1
    7ed3:	6a 02                	push   $0x2
    7ed5:	e8 8d ff ff ff       	call   7e67 <outb>
    7eda:	83 c4 08             	add    $0x8,%esp
    outb(0x1, 0x21);
    7edd:	6a 21                	push   $0x21
    7edf:	6a 01                	push   $0x1
    7ee1:	e8 81 ff ff ff       	call   7e67 <outb>
    7ee6:	83 c4 08             	add    $0x8,%esp
    outb(0x1, 0xA1);
    7ee9:	68 a1 00 00 00       	push   $0xa1
    7eee:	6a 01                	push   $0x1
    7ef0:	e8 72 ff ff ff       	call   7e67 <outb>
    7ef5:	83 c4 08             	add    $0x8,%esp
    outb(0xFE, 0x21);
    7ef8:	6a 21                	push   $0x21
    7efa:	68 fe 00 00 00       	push   $0xfe
    7eff:	e8 63 ff ff ff       	call   7e67 <outb>
    7f04:	83 c4 08             	add    $0x8,%esp
    outb(0xFF, 0xA1);
    7f07:	68 a1 00 00 00       	push   $0xa1
    7f0c:	68 ff 00 00 00       	push   $0xff
    7f11:	e8 51 ff ff ff       	call   7e67 <outb>
    7f16:	83 c4 08             	add    $0x8,%esp

    int tmo = 1193180 / 100; // 计算 100ms 触发的 时间
    7f19:	c7 45 fc 9b 2e 00 00 	movl   $0x2e9b,-0x4(%ebp)
    outb(0x36, 0x43);
    7f20:	6a 43                	push   $0x43
    7f22:	6a 36                	push   $0x36
    7f24:	e8 3e ff ff ff       	call   7e67 <outb>
    7f29:	83 c4 08             	add    $0x8,%esp
    outb((uint8_t)tmo, 0x40);
    7f2c:	8b 45 fc             	mov    -0x4(%ebp),%eax
    7f2f:	0f b6 c0             	movzbl %al,%eax
    7f32:	6a 40                	push   $0x40
    7f34:	50                   	push   %eax
    7f35:	e8 2d ff ff ff       	call   7e67 <outb>
    7f3a:	83 c4 08             	add    $0x8,%esp
    outb(tmo >> 8, 0x40);
    7f3d:	8b 45 fc             	mov    -0x4(%ebp),%eax
    7f40:	c1 f8 08             	sar    $0x8,%eax
    7f43:	0f b6 c0             	movzbl %al,%eax
    7f46:	6a 40                	push   $0x40
    7f48:	50                   	push   %eax
    7f49:	e8 19 ff ff ff       	call   7e67 <outb>
    7f4e:	83 c4 08             	add    $0x8,%esp

    // 给 IDT表 的 0x20 赋值
    idt_table[0x20].offset_l = (uint32_t)timer_int & 0xFFFF; // 给 低4位 赋值 (timer_int 为 中断处理函数)
    7f51:	b8 45 7e 00 00       	mov    $0x7e45,%eax
    7f56:	66 a3 00 d9 00 00    	mov    %ax,0xd900
    idt_table[0x20].offset_h = (uint32_t)timer_int >> 16;    // 高 16 位
    7f5c:	b8 45 7e 00 00       	mov    $0x7e45,%eax
    7f61:	c1 e8 10             	shr    $0x10,%eax
    7f64:	66 a3 06 d9 00 00    	mov    %ax,0xd906
    idt_table[0x20].selector = KERNEL_CODE_SEG;              // 设置 选择子 的 位置 为 代码段
    7f6a:	66 c7 05 02 d9 00 00 	movw   $0x8,0xd902
    7f71:	08 00 
    idt_table[0x20].attr = 0x8E00;                           // 设置 属性
    7f73:	66 c7 05 04 d9 00 00 	movw   $0x8e00,0xd904
    7f7a:	00 8e 

    pg_dir[MAP_ADDR >> 22] = (uint32_t)page_table | PDE_P | PDE_W | PDE_U; // 将 MAP_ADDR 的 高 10 位 作为 页目录项 的 索引
    7f7c:	b8 00 a0 00 00       	mov    $0xa000,%eax
    7f81:	83 c8 07             	or     $0x7,%eax
    7f84:	a3 00 b8 00 00       	mov    %eax,0xb800
    page_table[(MAP_ADDR >> 12) & 0x3FF] = (uint32_t)map_phy_buffer | PDE_P | PDE_W | PDE_U;
    7f89:	b8 00 90 00 00       	mov    $0x9000,%eax
    7f8e:	83 c8 07             	or     $0x7,%eax
    7f91:	a3 00 a0 00 00       	mov    %eax,0xa000
}
    7f96:	90                   	nop
    7f97:	c9                   	leave  
    7f98:	c3                   	ret    
