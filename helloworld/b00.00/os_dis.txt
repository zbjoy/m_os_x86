
os.elf:     file format elf32-i386
os.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00007c00

Program Header:
    LOAD off    0x00000000 vaddr 0x00007000 paddr 0x00007000 align 2**12
         filesz 0x00001250 memsz 0x00001250 flags r-x
    LOAD off    0x00002000 vaddr 0x00009000 paddr 0x00009000 align 2**12
         filesz 0x000038f0 memsz 0x00008100 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000544  00007c00  00007c00  00000c00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       0000001a  00008144  00008144  00001144  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .eh_frame     000000f0  00008160  00008160  00001160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .data         000038f0  00009000  00009000  00002000  2**12
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00004800  0000c900  0000c900  000058f0  2**5
                  ALLOC
  5 .comment      00000011  00000000  00000000  000058f0  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000040  00000000  00000000  00005908  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000437  00000000  00000000  00005948  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000156  00000000  00000000  00005d7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000014e  00000000  00000000  00005ed5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001f9  00000000  00000000  00006023  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00007c00 l    d  .text	00000000 .text
00008144 l    d  .rodata	00000000 .rodata
00008160 l    d  .eh_frame	00000000 .eh_frame
00009000 l    d  .data	00000000 .data
0000c900 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    df *ABS*	00000000 start.o
00007c05 l       .text	00000000 offset
00007c18 l       .text	00000000 read_self_all
00007e00 l       .text	00000000 _start_32
00007e93 l       .text	00000000 gdt_desc
00007e99 l       .text	00000000 idt_desc
00007e6f l       .text	00000000 task_0_entry
00000000 l    df *ABS*	00000000 os.c
0000c8e8 l     O .data	00000004 row.1736
0000a000 l     O .data	00001000 page_table
0000c8ec l     O .data	00000004 task_tss.1790
0000c0e8 g     O .data	00000800 gdt_table
0000c900 g     O .bss	00001000 task0_dpl3_stack
0000d900 g     O .bss	00001000 task1_dpl3_stack
00007f33 g     F .text	0000002e sys_show
00007f61 g     F .text	0000002c task_0
0000c000 g     O .data	00000068 task0_tss
00009000 g     O .data	00001000 map_phy_buffer
00007e7f g       .text	00000000 timer_int
00008010 g     F .text	00000134 os_init
0000e900 g     O .bss	00001000 task1_dpl0_stack
0000c080 g     O .data	00000068 task1_tss
00007e9f g     F .text	00000094 do_syscall
00007c00 g       .text	00000000 _start
00007fb9 g     F .text	0000001f outb
0000c8f0 g       .bss	00000000 __bss_start
0000b000 g     O .data	00001000 pg_dir
0000c8f0 g       .data	00000000 _edata
00011100 g       .bss	00000000 _end
00007e4f g       .text	00000000 syscall_handler
00007f8d g     F .text	0000002c task_1
0000f900 g     O .bss	00000800 idt_table
00010100 g     O .bss	00001000 task0_dpl0_stack
00007fd8 g     F .text	00000038 task_sched



Disassembly of section .text:

00007c00 <_start>:

	// 以下是代码区
 	.text
_start: 
	// 将 cs 置为 0
	jmp $0, $offset
    7c00:	ea                   	.byte 0xea
    7c01:	05                   	.byte 0x5
    7c02:	7c 00                	jl     7c04 <_start+0x4>
	...

00007c05 <offset>:
offset:

	// 将 实模式下 的 段寄存器 全部设置为 0 为 基地址(平坦模式)
	mov $0, %ax
    7c05:	b8 00 00 8e d8       	mov    $0xd88e0000,%eax
	mov %ax, %ds
	mov %ax, %ss
    7c0a:	8e d0                	mov    %eax,%ss
	mov %ax, %es
    7c0c:	8e c0                	mov    %eax,%es
	mov %ax, %fs
    7c0e:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
    7c10:	8e e8                	mov    %eax,%gs

	// TODO: 不理解, 为什么 要把 _start 存到 esp(32位) 寄存器中
	mov $_start, %esp
    7c12:	66 bc 00 7c          	mov    $0x7c00,%sp
	...

00007c18 <read_self_all>:
	
read_self_all:

	// 读取 剩余 代码 (os.c)
	mov $_start_32, %bx // 读取到内存的地址, 相当于 0x7E00
    7c18:	bb 00 7e b9 02       	mov    $0x2b97e00,%ebx
	mov $0x2, %cx  	 	// 读取扇区的开始位置
    7c1d:	00 b8 40 02 ba 80    	add    %bh,-0x7f45fdc0(%eax)
	mov $0x0240, %ax	 	// 读取的大小为 0x240(576) - 0x200(512) = 0x40(64) 个 扇区
	mov $0x80, %dx	 	// 表示 计算器上的 第一块 磁盘 (对于 qemu)
    7c23:	00 cd                	add    %cl,%ch
	int $0x0013		 	// 通过 INT 13 x86的软中断 跳转到 BIOS中断提供的 BIOS代码 的 读取 磁盘的 函数位置
    7c25:	13 72 f0             	adc    -0x10(%edx),%esi

	jc read_self_all	// 判断是否成功, 失败重新调用 BIOS提供的读取磁盘的代码

	cli 				// 关中断
    7c28:	fa                   	cli    
	lgdt gdt_desc 		// 通过 lgdt 指令 将 os.c 中 定义的 gdt_table 的 地址读取进来
    7c29:	0f 01 16             	lgdtl  (%esi)
    7c2c:	93                   	xchg   %eax,%ebx
    7c2d:	7e 0f                	jle    7c3e <read_self_all+0x26>
	lidt idt_desc		// 通过 lidt 指令 将 os.c 中 定义的 idt_table 的 地址读取进来
    7c2f:	01 1e                	add    %ebx,(%esi)
    7c31:	99                   	cltd   
    7c32:	7e 66                	jle    7c9a <read_self_all+0x82>
	mov $1, %eax		// CR0 是 32位, 所以 给到 exa
    7c34:	b8 01 00 00 00       	mov    $0x1,%eax
	lmsw %ax			// 会将 CR0 寄存器 中 的 PE(最低位) 置为 1, 开启 保护模式
    7c39:	0f 01 f0             	lmsw   %ax
	jmp $KERNEL_CODE_SEG, $_start_32	// 原来 为 16位 实模式, 要进入 保护模式, 需要 做一些 跳转 工作(会 清除 一些 流水线 等)
    7c3c:	ea 00 7e 08 00 00 00 	ljmp   $0x0,$0x87e00
	...
    7dfb:	00 00                	add    %al,(%eax)
    7dfd:	00 55 aa             	add    %dl,-0x56(%ebp)

00007e00 <_start_32>:

_start_32:
	// .fill 64*1024, 1, 0x35  // 填充 64KB 数据, 每个为 1Byte, 数据为 0x35
	
	// 将 寄存器 中的 值 赋上 对应 的 索引值
	mov $KERNEL_DATA_SEG, %ax
    7e00:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
    7e04:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
    7e06:	8e d0                	mov    %eax,%ss
	mov %ax, %es
    7e08:	8e c0                	mov    %eax,%es
	mov %ax, %fs
    7e0a:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
    7e0c:	8e e8                	mov    %eax,%gs
	mov $_start, %esp
    7e0e:	bc 00 7c 00 00       	mov    $0x7c00,%esp

	call os_init
    7e13:	e8 f8 01 00 00       	call   8010 <os_init>

	// 将 pg_dir 设置 到 cr3 寄存器中 (将 cr3 寄存器 的 Page Address 设置为了 pg_dir 的 地址)
	mov $pg_dir, %eax
    7e18:	b8 00 b0 00 00       	mov    $0xb000,%eax
	mov %eax, %cr3
    7e1d:	0f 22 d8             	mov    %eax,%cr3

	// 设置 cr4 寄存器 的 第四位 PSE 使 允许 4M 到 4M 的 映射
	mov %cr4, %eax
    7e20:	0f 20 e0             	mov    %cr4,%eax
	orl $(1 << 4), %eax
    7e23:	83 c8 10             	or     $0x10,%eax
	mov %eax, %cr4
    7e26:	0f 22 e0             	mov    %eax,%cr4

	// 将 cr0 最高位 置为 1, 使 打开 分页机制
	mov %cr0, %eax
    7e29:	0f 20 c0             	mov    %cr0,%eax
	orl $(1 << 31), %eax
    7e2c:	0d 00 00 00 80       	or     $0x80000000,%eax
	mov %eax, %cr0
    7e31:	0f 22 c0             	mov    %eax,%cr0

	// sti // 打开中断
	
	// jmp .

	mov $TASK0_TSS_SEG, %ax
    7e34:	66 b8 28 00          	mov    $0x28,%ax
	ltr %ax								// 告诉 CPU 当前运行的 是 TASK0
    7e38:	0f 00 d8             	ltr    %ax

	push $APP_DATA_SEG 	 				// 保存 APP_DATA_SEG 到栈中 (放入 ss 寄存器)
    7e3b:	6a 23                	push   $0x23
	// push $0		   					// 给 一定 的 栈空间
	// push $task0_dpl3_stack + 1024 * 4  	// 给到 栈的 地址 (给 数组 的 末尾) (给到 ESP 寄存器)
	push $task0_dpl3_stack + 1024  	// 给到 栈的 地址 (给 数组 的 末尾) (给到 ESP 寄存器)
    7e3d:	68 00 cd 00 00       	push   $0xcd00
	// push $0 // $0x202							// 给到 EFLAGS 寄存器, 给相应位 置1 打开了 中断(0x202)
	push $0x202							// 打开 中断
    7e42:	68 02 02 00 00       	push   $0x202
	push $APP_CODE_SEG 					// 给到 CS 寄存器
    7e47:	6a 1b                	push   $0x1b
	push $task_0_entry 					// 给到 EIP 寄存器	
    7e49:	68 6f 7e 00 00       	push   $0x7e6f
	iret 			   					// 结束中断, 重新执行 被中断的 指令
    7e4e:	cf                   	iret   

00007e4f <syscall_handler>:


syscall_handler:
	// 保存 寄存器 的 值
	push %ds
    7e4f:	1e                   	push   %ds
	pusha	
    7e50:	60                   	pusha  

	// 将 ds 寄存器 中的 值 切换为 内核数据段
	mov $KERNEL_DATA_SEG, %ax
    7e51:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
    7e55:	8e d8                	mov    %eax,%ds

	mov %esp, %ebp
    7e57:	89 e5                	mov    %esp,%ebp
	// 将 对应 参数的 值 压入 栈中
	push 13*4(%ebp)
    7e59:	ff 75 34             	pushl  0x34(%ebp)
	push 12*4(%ebp)
    7e5c:	ff 75 30             	pushl  0x30(%ebp)
	push 11*4(%ebp)
    7e5f:	ff 75 2c             	pushl  0x2c(%ebp)
	// push $1
	// push $2
	// push $3

	// ================= DEBUG END   ====================
	call do_syscall
    7e62:	e8 38 00 00 00       	call   7e9f <do_syscall>

	add $(3 * 4), %esp // 弹出 3 个 参数
    7e67:	83 c4 0c             	add    $0xc,%esp

	popa
    7e6a:	61                   	popa   
	pop %ds
    7e6b:	1f                   	pop    %ds

	// ret
	retf $(3 * 4)
    7e6c:	ca 0c 00             	lret   $0xc

00007e6f <task_0_entry>:

// 任务 0
task_0_entry:
	mov %ss, %ax // 保存 ss 寄存器 中的 值
    7e6f:	66 8c d0             	mov    %ss,%ax
	mov %ax, %ds // 将 ss 寄存器 中的 值 赋给 ds 寄存器
    7e72:	8e d8                	mov    %eax,%ds
	mov %ax, %es // 将 ss 寄存器 中的 值 赋给 es 寄存器
    7e74:	8e c0                	mov    %eax,%es
	mov %ax, %fs // 将 ss 寄存器 中的 值 赋给 fs 寄存器
    7e76:	8e e0                	mov    %eax,%fs
	mov %ax, %gs // 将 ss 寄存器 中的 值 赋给 gs 寄存器
    7e78:	8e e8                	mov    %eax,%gs
	// jmp .
	jmp task_0	 // 跳转到 c语言 的 对应函数
    7e7a:	e9 e2 00 00 00       	jmp    7f61 <task_0>

00007e7f <timer_int>:

timer_int:
	push %ds // 保存 ds 寄存器 中的 值
    7e7f:	1e                   	push   %ds
	pusha	 // 保存 ax, bx, cx, dx, ... 等 寄存器的 值
    7e80:	60                   	pusha  

	mov $0x20, %al
    7e81:	b0 20                	mov    $0x20,%al
	outb %al, $0x20
    7e83:	e6 20                	out    %al,$0x20

	mov $KERNEL_DATA_SEG, %ax
    7e85:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
    7e89:	8e d8                	mov    %eax,%ds

	call task_sched	// 进行 进程间切换(调用对应的 C代码)
    7e8b:	e8 48 01 00 00       	call   7fd8 <task_sched>

	popa  	 // 恢复 ax, bx, cx, dx, ... 等 寄存器的 值
    7e90:	61                   	popa   
	pop %ds  // 恢复 ds 寄存器 中的 值
    7e91:	1f                   	pop    %ds

	iret // 结束中断, 重新执行 被中断的 指令
    7e92:	cf                   	iret   

00007e93 <gdt_desc>:
    7e93:	ff 07                	incl   (%edi)
    7e95:	e8                   	.byte 0xe8
    7e96:	c0 00 00             	rolb   $0x0,(%eax)

00007e99 <idt_desc>:
    7e99:	ff 07                	incl   (%edi)
    7e9b:	00 f9                	add    %bh,%cl
	...

00007e9f <do_syscall>:
typedef unsigned char uint8_t;
typedef unsigned short uint16_t;
typedef unsigned int uint32_t;

void do_syscall(int func, char* str, char color)
{
    7e9f:	55                   	push   %ebp
    7ea0:	89 e5                	mov    %esp,%ebp
    7ea2:	83 ec 14             	sub    $0x14,%esp
    7ea5:	8b 45 10             	mov    0x10(%ebp),%eax
    7ea8:	88 45 ec             	mov    %al,-0x14(%ebp)
    static int row = 1;

    if (func == 2)
    7eab:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
    7eaf:	75 7f                	jne    7f30 <do_syscall+0x91>
    {
        unsigned short* dest = (unsigned short*)0xB8000 + 80 * row;
    7eb1:	8b 15 e8 c8 00 00    	mov    0xc8e8,%edx
    7eb7:	89 d0                	mov    %edx,%eax
    7eb9:	c1 e0 02             	shl    $0x2,%eax
    7ebc:	01 d0                	add    %edx,%eax
    7ebe:	c1 e0 05             	shl    $0x5,%eax
    7ec1:	05 00 80 0b 00       	add    $0xb8000,%eax
    7ec6:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while (*str)
    7ec9:	eb 27                	jmp    7ef2 <do_syscall+0x53>
        {
            *dest++ = *str++ | (color << 8);
    7ecb:	8b 45 0c             	mov    0xc(%ebp),%eax
    7ece:	8d 50 01             	lea    0x1(%eax),%edx
    7ed1:	89 55 0c             	mov    %edx,0xc(%ebp)
    7ed4:	0f b6 00             	movzbl (%eax),%eax
    7ed7:	66 98                	cbtw   
    7ed9:	0f be 55 ec          	movsbl -0x14(%ebp),%edx
    7edd:	c1 e2 08             	shl    $0x8,%edx
    7ee0:	09 d0                	or     %edx,%eax
    7ee2:	89 c1                	mov    %eax,%ecx
    7ee4:	8b 45 fc             	mov    -0x4(%ebp),%eax
    7ee7:	8d 50 02             	lea    0x2(%eax),%edx
    7eea:	89 55 fc             	mov    %edx,-0x4(%ebp)
    7eed:	89 ca                	mov    %ecx,%edx
    7eef:	66 89 10             	mov    %dx,(%eax)
        while (*str)
    7ef2:	8b 45 0c             	mov    0xc(%ebp),%eax
    7ef5:	0f b6 00             	movzbl (%eax),%eax
    7ef8:	84 c0                	test   %al,%al
    7efa:	75 cf                	jne    7ecb <do_syscall+0x2c>
        }
        row = (row >= 25) ? 0 : row + 1;
    7efc:	a1 e8 c8 00 00       	mov    0xc8e8,%eax
    7f01:	83 f8 18             	cmp    $0x18,%eax
    7f04:	7f 0a                	jg     7f10 <do_syscall+0x71>
    7f06:	a1 e8 c8 00 00       	mov    0xc8e8,%eax
    7f0b:	83 c0 01             	add    $0x1,%eax
    7f0e:	eb 05                	jmp    7f15 <do_syscall+0x76>
    7f10:	b8 00 00 00 00       	mov    $0x0,%eax
    7f15:	a3 e8 c8 00 00       	mov    %eax,0xc8e8

        for (int i = 0; i < 0xFFFFF; i++);
    7f1a:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    7f21:	eb 04                	jmp    7f27 <do_syscall+0x88>
    7f23:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    7f27:	81 7d f8 fe ff 0f 00 	cmpl   $0xffffe,-0x8(%ebp)
    7f2e:	7e f3                	jle    7f23 <do_syscall+0x84>
    }
}
    7f30:	90                   	nop
    7f31:	c9                   	leave  
    7f32:	c3                   	ret    

00007f33 <sys_show>:

void sys_show(char* str, char color)
{
    7f33:	55                   	push   %ebp
    7f34:	89 e5                	mov    %esp,%ebp
    7f36:	83 ec 14             	sub    $0x14,%esp
    7f39:	8b 45 0c             	mov    0xc(%ebp),%eax
    7f3c:	88 45 ec             	mov    %al,-0x14(%ebp)
    // uint32_t addr[] = {0, SYSCALL_SEG};
    const uint32_t addr[] = {0, SYSCALL_SEG};
    7f3f:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    7f46:	c7 45 fc 38 00 00 00 	movl   $0x38,-0x4(%ebp)
    // const unsigned long addr = {0, SYSCALL_SEG};
    // 将 对应的 参数压入栈中, 并调用 系统调用
    __asm__ __volatile__("push %[color];push %[str];push %[id];lcalll *(%[a])\n\n"::[color]"m"(color), [str]"m"(str), [id]"r"(2),[a]"r"(addr));
    7f4d:	ba 02 00 00 00       	mov    $0x2,%edx
    7f52:	8d 45 f8             	lea    -0x8(%ebp),%eax
    7f55:	ff 75 ec             	pushl  -0x14(%ebp)
    7f58:	ff 75 08             	pushl  0x8(%ebp)
    7f5b:	52                   	push   %edx
    7f5c:	ff 18                	lcall  *(%eax)
}
    7f5e:	90                   	nop
    7f5f:	c9                   	leave  
    7f60:	c3                   	ret    

00007f61 <task_0>:

void task_0(void)
{
    7f61:	55                   	push   %ebp
    7f62:	89 e5                	mov    %esp,%ebp
    7f64:	83 ec 10             	sub    $0x10,%esp
    char* str = "task a: 1234";
    7f67:	c7 45 f8 44 81 00 00 	movl   $0x8144,-0x8(%ebp)
    uint8_t color = 0;
    7f6e:	c6 45 ff 00          	movb   $0x0,-0x1(%ebp)

    for (;;)
    {
        sys_show(str, color++);
    7f72:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
    7f76:	8d 50 01             	lea    0x1(%eax),%edx
    7f79:	88 55 ff             	mov    %dl,-0x1(%ebp)
    7f7c:	0f be c0             	movsbl %al,%eax
    7f7f:	50                   	push   %eax
    7f80:	ff 75 f8             	pushl  -0x8(%ebp)
    7f83:	e8 ab ff ff ff       	call   7f33 <sys_show>
    7f88:	83 c4 08             	add    $0x8,%esp
    7f8b:	eb e5                	jmp    7f72 <task_0+0x11>

00007f8d <task_1>:
    }
}

void task_1(void)
{
    7f8d:	55                   	push   %ebp
    7f8e:	89 e5                	mov    %esp,%ebp
    7f90:	83 ec 10             	sub    $0x10,%esp
    char* str = "task b: 5678";
    7f93:	c7 45 f8 51 81 00 00 	movl   $0x8151,-0x8(%ebp)
    uint8_t color = 0xFF;
    7f9a:	c6 45 ff ff          	movb   $0xff,-0x1(%ebp)

    for (;;)
    {
        sys_show(str, color--);
    7f9e:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
    7fa2:	8d 50 ff             	lea    -0x1(%eax),%edx
    7fa5:	88 55 ff             	mov    %dl,-0x1(%ebp)
    7fa8:	0f be c0             	movsbl %al,%eax
    7fab:	50                   	push   %eax
    7fac:	ff 75 f8             	pushl  -0x8(%ebp)
    7faf:	e8 7f ff ff ff       	call   7f33 <sys_show>
    7fb4:	83 c4 08             	add    $0x8,%esp
    7fb7:	eb e5                	jmp    7f9e <task_1+0x11>

00007fb9 <outb>:

    [SYSCALL_SEG / 8] = {0x0000, KERNEL_CODE_SEG, 0xEC03, 0x0000},
};

void outb(uint8_t data, uint16_t port)
{
    7fb9:	55                   	push   %ebp
    7fba:	89 e5                	mov    %esp,%ebp
    7fbc:	83 ec 08             	sub    $0x8,%esp
    7fbf:	8b 55 08             	mov    0x8(%ebp),%edx
    7fc2:	8b 45 0c             	mov    0xc(%ebp),%eax
    7fc5:	88 55 fc             	mov    %dl,-0x4(%ebp)
    7fc8:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    __asm__ __volatile__ ("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
    7fcc:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
    7fd0:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
    7fd4:	ee                   	out    %al,(%dx)
}
    7fd5:	90                   	nop
    7fd6:	c9                   	leave  
    7fd7:	c3                   	ret    

00007fd8 <task_sched>:


// 进行 进程间 切换
void task_sched(void) 
{
    7fd8:	55                   	push   %ebp
    7fd9:	89 e5                	mov    %esp,%ebp
    7fdb:	83 ec 10             	sub    $0x10,%esp
    static int task_tss = TASK0_TSS_SEG;

    task_tss = (task_tss == TASK0_TSS_SEG) ? TASK1_TSS_SEG : TASK0_TSS_SEG;
    7fde:	a1 ec c8 00 00       	mov    0xc8ec,%eax
    7fe3:	83 f8 28             	cmp    $0x28,%eax
    7fe6:	75 07                	jne    7fef <task_sched+0x17>
    7fe8:	b8 30 00 00 00       	mov    $0x30,%eax
    7fed:	eb 05                	jmp    7ff4 <task_sched+0x1c>
    7fef:	b8 28 00 00 00       	mov    $0x28,%eax
    7ff4:	a3 ec c8 00 00       	mov    %eax,0xc8ec

    // 通过 内联 汇编 实现 远跳转指令(ljmp指令)
    uint32_t addr[] = {0, task_tss};
    7ff9:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    8000:	a1 ec c8 00 00       	mov    0xc8ec,%eax
    8005:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__ ("ljmpl *(%[a])"::[a]"r"(addr));
    8008:	8d 45 f8             	lea    -0x8(%ebp),%eax
    800b:	ff 28                	ljmp   *(%eax)
}
    800d:	90                   	nop
    800e:	c9                   	leave  
    800f:	c3                   	ret    

00008010 <os_init>:

void timer_int(void);
void syscall_handler(void);

void os_init(void)
{
    8010:	55                   	push   %ebp
    8011:	89 e5                	mov    %esp,%ebp
    8013:	83 ec 10             	sub    $0x10,%esp
    // 初始化 8259 与 8253  定时器
    outb(0x11, 0x20);
    8016:	6a 20                	push   $0x20
    8018:	6a 11                	push   $0x11
    801a:	e8 9a ff ff ff       	call   7fb9 <outb>
    801f:	83 c4 08             	add    $0x8,%esp
    outb(0x11, 0xA0);
    8022:	68 a0 00 00 00       	push   $0xa0
    8027:	6a 11                	push   $0x11
    8029:	e8 8b ff ff ff       	call   7fb9 <outb>
    802e:	83 c4 08             	add    $0x8,%esp
    outb(0x20, 0x21); // 设置 8259主片 在查 IDT表 时 通过 0x20 来 查找
    8031:	6a 21                	push   $0x21
    8033:	6a 20                	push   $0x20
    8035:	e8 7f ff ff ff       	call   7fb9 <outb>
    803a:	83 c4 08             	add    $0x8,%esp
    outb(0x28, 0xA1);
    803d:	68 a1 00 00 00       	push   $0xa1
    8042:	6a 28                	push   $0x28
    8044:	e8 70 ff ff ff       	call   7fb9 <outb>
    8049:	83 c4 08             	add    $0x8,%esp
    outb(1 << 2, 0x21);
    804c:	6a 21                	push   $0x21
    804e:	6a 04                	push   $0x4
    8050:	e8 64 ff ff ff       	call   7fb9 <outb>
    8055:	83 c4 08             	add    $0x8,%esp
    outb(2, 0xA1);
    8058:	68 a1 00 00 00       	push   $0xa1
    805d:	6a 02                	push   $0x2
    805f:	e8 55 ff ff ff       	call   7fb9 <outb>
    8064:	83 c4 08             	add    $0x8,%esp
    outb(0x1, 0x21);
    8067:	6a 21                	push   $0x21
    8069:	6a 01                	push   $0x1
    806b:	e8 49 ff ff ff       	call   7fb9 <outb>
    8070:	83 c4 08             	add    $0x8,%esp
    outb(0x1, 0xA1);
    8073:	68 a1 00 00 00       	push   $0xa1
    8078:	6a 01                	push   $0x1
    807a:	e8 3a ff ff ff       	call   7fb9 <outb>
    807f:	83 c4 08             	add    $0x8,%esp
    outb(0xFE, 0x21);
    8082:	6a 21                	push   $0x21
    8084:	68 fe 00 00 00       	push   $0xfe
    8089:	e8 2b ff ff ff       	call   7fb9 <outb>
    808e:	83 c4 08             	add    $0x8,%esp
    outb(0xFF, 0xA1);
    8091:	68 a1 00 00 00       	push   $0xa1
    8096:	68 ff 00 00 00       	push   $0xff
    809b:	e8 19 ff ff ff       	call   7fb9 <outb>
    80a0:	83 c4 08             	add    $0x8,%esp

    int tmo = 1193180 / 10; // 计算 100ms 触发的 时间
    80a3:	c7 45 fc 16 d2 01 00 	movl   $0x1d216,-0x4(%ebp)
    outb(0x36, 0x43);
    80aa:	6a 43                	push   $0x43
    80ac:	6a 36                	push   $0x36
    80ae:	e8 06 ff ff ff       	call   7fb9 <outb>
    80b3:	83 c4 08             	add    $0x8,%esp
    outb((uint8_t)tmo, 0x40);
    80b6:	8b 45 fc             	mov    -0x4(%ebp),%eax
    80b9:	0f b6 c0             	movzbl %al,%eax
    80bc:	6a 40                	push   $0x40
    80be:	50                   	push   %eax
    80bf:	e8 f5 fe ff ff       	call   7fb9 <outb>
    80c4:	83 c4 08             	add    $0x8,%esp
    outb(tmo >> 8, 0x40);
    80c7:	8b 45 fc             	mov    -0x4(%ebp),%eax
    80ca:	c1 f8 08             	sar    $0x8,%eax
    80cd:	0f b6 c0             	movzbl %al,%eax
    80d0:	6a 40                	push   $0x40
    80d2:	50                   	push   %eax
    80d3:	e8 e1 fe ff ff       	call   7fb9 <outb>
    80d8:	83 c4 08             	add    $0x8,%esp

    // 给 IDT表 的 0x20 赋值
    idt_table[0x20].offset_l = (uint32_t)timer_int & 0xFFFF; // 给 低4位 赋值 (timer_int 为 中断处理函数)
    80db:	b8 7f 7e 00 00       	mov    $0x7e7f,%eax
    80e0:	66 a3 00 fa 00 00    	mov    %ax,0xfa00
    idt_table[0x20].offset_h = (uint32_t)timer_int >> 16;    // 高 16 位
    80e6:	b8 7f 7e 00 00       	mov    $0x7e7f,%eax
    80eb:	c1 e8 10             	shr    $0x10,%eax
    80ee:	66 a3 06 fa 00 00    	mov    %ax,0xfa06
    idt_table[0x20].selector = KERNEL_CODE_SEG;              // 设置 选择子 的 位置 为 代码段
    80f4:	66 c7 05 02 fa 00 00 	movw   $0x8,0xfa02
    80fb:	08 00 
    idt_table[0x20].attr = 0x8E00;                           // 设置 属性
    80fd:	66 c7 05 04 fa 00 00 	movw   $0x8e00,0xfa04
    8104:	00 8e 

    gdt_table[TASK0_TSS_SEG / 8].base_l = (uint16_t)(uint32_t)task0_tss;
    8106:	b8 00 c0 00 00       	mov    $0xc000,%eax
    810b:	66 a3 12 c1 00 00    	mov    %ax,0xc112
    gdt_table[TASK1_TSS_SEG / 8].base_l = (uint16_t)(uint32_t)task1_tss;
    8111:	b8 80 c0 00 00       	mov    $0xc080,%eax
    8116:	66 a3 1a c1 00 00    	mov    %ax,0xc11a

    // 补充 系统调用的 函数 起始地址
    gdt_table[SYSCALL_SEG / 8].limit_l = (uint16_t)(uint32_t)syscall_handler;
    811c:	b8 4f 7e 00 00       	mov    $0x7e4f,%eax
    8121:	66 a3 20 c1 00 00    	mov    %ax,0xc120

    pg_dir[MAP_ADDR >> 22] = (uint32_t)page_table | PDE_P | PDE_W | PDE_U; // 将 MAP_ADDR 的 高 10 位 作为 页目录项 的 索引
    8127:	b8 00 a0 00 00       	mov    $0xa000,%eax
    812c:	83 c8 07             	or     $0x7,%eax
    812f:	a3 00 b8 00 00       	mov    %eax,0xb800
    page_table[(MAP_ADDR >> 12) & 0x3FF] = (uint32_t)map_phy_buffer | PDE_P | PDE_W | PDE_U;
    8134:	b8 00 90 00 00       	mov    $0x9000,%eax
    8139:	83 c8 07             	or     $0x7,%eax
    813c:	a3 00 a0 00 00       	mov    %eax,0xa000
}
    8141:	90                   	nop
    8142:	c9                   	leave  
    8143:	c3                   	ret    
